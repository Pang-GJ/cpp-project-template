# additional target to perform clang-format run, requires clang-format

# get all project files
# file(GLOB_RECURSE ALL_SOURCE_FILES *.cpp *.cc *.h *.hpp)
file (GLOB_RECURSE ALL_SOURCE_FILES
  src/*.cpp
  src/*.h
  example/*.h
  example/*.cpp)

foreach (SOURCE_FILE ${ALL_SOURCE_FILES})
    string(FIND ${SOURCE_FILE} ${PROJECT_TRDPARTY_DIR} PROJECT_TRDPARTY_DIR_FOUND)
    if (NOT ${PROJECT_TRDPARTY_DIR_FOUND} EQUAL -1)
        list(REMOVE_ITEM ALL_SOURCE_FILES ${SOURCE_FILE})
    endif ()
endforeach ()

foreach (SOURCE_FILE ${ALL_SOURCE_FILES})
  string(FIND ${SOURCE_FILE} ${PROJECT_SOURCE_DIR}/build PROJECT_BUILD_DIR_FOUND)
  if (NOT ${PROJECT_BUILD_DIR_FOUND} EQUAL -1)
        list(REMOVE_ITEM ALL_SOURCE_FILES ${SOURCE_FILE})
    endif ()
endforeach ()


add_custom_target(
        clangformat
        COMMAND /usr/bin/clang-format
        -style=file
        -i
        ${ALL_SOURCE_FILES}
)

add_custom_target(
        clangtidy
        COMMAND /usr/bin/clang-tidy
        --config-file=${PROJECT_SOURCE_DIR}/.clang-tidy
        ${ALL_SOURCE_FILES}
)

###########################################################
# "make check-clang-tidy" target
###########################################################
# runs clang-tidy and exits with a non-zero exit code if any errors are found.
# note that clang-tidy automatically looks for a .clang-tidy file in parent directories
set(CLANG_APPLY_REPLACEMENTS_BIN clang-apply-replacements)

add_custom_target(check-clang-tidy
        ${PROJECT_SOURCE_DIR}/cmake/run_clang_tidy.py                     # run LLVM's clang-tidy script
        -p ${CMAKE_BINARY_DIR}                                            # using cmake's generated compile commands
        )
add_custom_target(fix-clang-tidy
        ${PROJECT_SOURCE_DIR}/cmake/run_clang_tidy.py                     # run LLVM's clang-tidy script
        -p ${CMAKE_BINARY_DIR}                                            # using cmake's generated compile commands
        -clang-apply-replacements-binary ${CLANG_APPLY_REPLACEMENTS_BIN}  # using our clang-apply-replacements binary
        -fix                                                              # apply suggested changes generated by clang-tidy
        )
add_custom_target(check-clang-tidy-diff
        ${PROJECT_SOURCE_DIR}/cmake/run_clang_tidy.py                     # run LLVM's clang-tidy script
        -p ${CMAKE_BINARY_DIR}                                            # using cmake's generated compile commands
        -only-diff                                                        # only check diff files to master
        )
add_custom_target(fix-clang-tidy-diff
        ${PROJECT_SOURCE_DIR}/cmake/run_clang_tidy.py                     # run LLVM's clang-tidy script
        -p ${CMAKE_BINARY_DIR}                                            # using cmake's generated compile commands
        -clang-apply-replacements-binary ${CLANG_APPLY_REPLACEMENTS_BIN}  # using our clang-apply-replacements binary
        -fix                                                              # apply suggested changes generated by clang-tidy
        -only-diff                                                        # only check diff files to master
        )
